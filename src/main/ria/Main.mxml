<?xml version="1.0" ?>
        <!--

        NAMING CONVENTION:
          - Every callback function starts with handle; if successfull no postfix, if failure "failure" postfix.
          - The main service is named "srv"
          - To avoid naming collision, all component ids (which are available variables) are postfix with "id";
              on the other hands component ids should not be named after the component class (don't use "saveButtonId" but "saveId")
              except for Validator and Formatter; components that bring somes business rules ("nameValidator" or "longDateTimeFormatter").
        -->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:nestor="nestor.component.*"
                creationComplete="initApp(event)">

    <mx:Metadata>
        [ResourceBundle("nestor")]
    </mx:Metadata>

    <mx:Script><![CDATA[
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.IFlexDisplayObject;
        import mx.events.FlexEvent;
        import mx.events.ValidationResultEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import nestor.component.*;
        import nestor.events.ChangePicker;
        import nestor.model.*;
        
        [Bindable]
        public var program:Program = new Program();

        [Bindable]
        public var recipients:ArrayCollection;

        [Bindable]
        public var bureaus:ArrayCollection;


        [Bindable]
        public var contractTypes:ArrayCollection;


        private function initApp(event:FlexEvent):void {
            trace(resourceManager.getLocales())
            pickerService.listAllBureaus();
            pickerService.listAllRecipients();
            pickerService.listAllContractTypes();
        }

        private function handleRecipients(event:ResultEvent):void
        {
            recipients = event.result as ArrayCollection;
        }

        private function handleBureaus(event:ResultEvent):void
        {
            bureaus = event.result as ArrayCollection;
        }

        private function handleContractTypes(event:ResultEvent):void
        {
            contractTypes = event.result as ArrayCollection;
        }


        private function search():void {
            srv.findByName(searchId.text);
        }

        private function save():void {
            var validationResult:Array = Validator.validateAll([nameValidator, recipientValidatorId]);
            if (validationResult.length > 0) {
                dispatchEvent(new ValidationResultEvent(ValidationResultEvent.INVALID));
                Alert.show(resourceManager.getString('nestor', 'validationError'),
                        resourceManager.getString('nestor', 'validationErrorTitle'));
                return;
            }


            // Hopefully this will be gone in Flex 4 ...
            program.name = nameId.text;
            program.managerName = managerNameId.text;
            program.recipient = Recipient(recipientId.selectedItem)
            program.bureau = Bureau(bureauId.selectedItem)
            program.bureauDesignationDate = bureauDesignationDateId.selectedDate;
            program.councilDate = councilDateId.selectedDate;
            program.managerDesignationDate = managerDesignationDateId.selectedDate;
            srv.save(program);
        }

        private function handleSave(event:ResultEvent):void
        {
            program = event.result as Program;
        }

         private function handleSearchFault(event:FaultEvent):void {
             Alert.show(event.fault.rootCause.message, "Information");
             trace(event);
             
         }
        private function handleSearch(event:ResultEvent):void
        {
            program = event.result as Program;
           
            contractTypeId.selectedItem = program.getSelected(contractTypeId.dataProvider, program.contractType.id);
            recipientId.selectedItem = program.getSelected(recipientId.dataProvider, program.recipient.id);
            bureauId.selectedItem = program.getSelected(bureauId.dataProvider, program.bureau.id);
        }

        private function showBureauPicker(evt:MouseEvent):void {
            showPicker(evt, new BureauPicker(), bureaus)
        }

        private function showRecipientPicker(evt:MouseEvent):void {
            showPicker(evt, new RecipientPicker(), recipients);
        }

        private function showPicker(evt:MouseEvent, template:PickerTemplate, values:ArrayCollection):void {
            PopUpManager.addPopUp(template, this, true);
            calcPopUpPos(template, evt);
            template.addEventListener(ChangePicker.TYPE, function(evt:ChangePicker):void {
                values.addItem(evt.picker)
            });


        }

        private function calcPopUpPos(popup:IFlexDisplayObject, evt:MouseEvent) {
            var point:Point = new Point();
            point.x = evt.localX;
            point.y = evt.localY;
            point = evt.target.localToGlobal(point);
            popup.x = point.x;
            popup.y = point.y;
        }


        private function createPlanning(evt:MouseEvent):void {
        //    showPicker(evt, new PlanningPicker(), plannings)
        }


        private function deletePlanning():void {
        }

        ]]>
    </mx:Script>
    <mx:DateFormatter id="longDateTimeFormatter"
                      formatString="{resourceManager.getString('SharedResources', 'longDateTimeField')}"></mx:DateFormatter>

    <mx:RemoteObject id="srv" destination="program">
        <mx:method name="save" result="handleSave(event)"/>
        <mx:method name="findByName" result="handleSearch(event)" fault="handleSearchFault(event)"/>
    </mx:RemoteObject>

    <mx:RemoteObject id="pickerService" destination="picker">
        <mx:method name="listAllRecipients" result="handleRecipients(event)"/>
        <mx:method name="listAllBureaus" result="handleBureaus(event)"/>
        <mx:method name="listAllContractTypes" result="handleContractTypes(event)"/>
    </mx:RemoteObject>

    <mx:Validator id="nameValidator" source="{nameId}" property="text" required="true"
                  triggerEvent="{ValidationResultEvent.INVALID}"/>
    <mx:Validator id="recipientValidatorId" source="{recipientId}" property="selectedItem" required="true"
                  triggerEvent="{ValidationResultEvent.INVALID}"/>


    <mx:HBox horizontalAlign="right" width="100%">
        <mx:TextInput id="searchId" width="100"/>
        <mx:Button label="{resourceManager.getString('nestor', 'search')}" click="search()"/>
        <mx:Spacer width="100"/>
        <nestor:Locale id="localeCombo"/>
    </mx:HBox>
    <mx:Panel title="{resourceManager.getString('nestor', 'program')}" width="100%" height="100%">

        <mx:Box enabled="false" horizontalAlign="right" width="100%">
            <mx:HBox>
                <mx:Label text="{resourceManager.getString('nestor', 'creationDate')}"/>
                <mx:Label text="{longDateTimeFormatter.format(program.creationDate)}"/>
            </mx:HBox>
            <mx:HBox>
                <mx:Label text="{resourceManager.getString('nestor', 'modifiedDate')}"/>
                <mx:Label text="{longDateTimeFormatter.format(program.modifiedDate)}"/>
            </mx:HBox>
        </mx:Box>
        <mx:Form id="formId">
            <mx:FormItem label="{resourceManager.getString('nestor', 'name')}" required="true">
                <mx:TextInput id="nameId" text="{program.name}"/>
            </mx:FormItem>
            <mx:FormItem label="{resourceManager.getString('nestor', 'contractType')}" required="true">
                <mx:ComboBox id="contractTypeId" dataProvider="{contractTypes}"/>
            </mx:FormItem>
            <mx:FormItem direction="horizontal" label="{resourceManager.getString('nestor', 'recipient')}"
                         required="true">
                <mx:ComboBox id="recipientId" dataProvider="{recipients}"
                             prompt="{resourceManager.getString('nestor', 'prompt')}"/>
                <mx:Button icon="@Embed('icon/addlink.gif')" click="showRecipientPicker(event)"></mx:Button>
            </mx:FormItem>
            <mx:FormItem label="{resourceManager.getString('nestor', 'managerName')}">
                <mx:TextInput id="managerNameId" text="{program.managerName}"/>
            </mx:FormItem>
            <mx:FormItem direction="horizontal" label="{resourceManager.getString('nestor', 'bureau')}">
                <mx:ComboBox id="bureauId" dataProvider="{bureaus}"
                             prompt="{resourceManager.getString('nestor', 'prompt')}"/>
                <mx:Button icon="@Embed('icon/addlink.gif')" click="showBureauPicker(event)"></mx:Button>
            </mx:FormItem>
            <mx:FormItem label="{resourceManager.getString('nestor', 'bureauDesignation')}">
                <mx:DateField id="bureauDesignationDateId" selectedDate="{program.bureauDesignationDate}"/>
            </mx:FormItem>
            <mx:FormItem label="{resourceManager.getString('nestor', 'council')}">
                <mx:DateField id="councilDateId" selectedDate="{program.councilDate}"/>
            </mx:FormItem>
            <mx:FormItem label="{resourceManager.getString('nestor', 'managerDesignation')}">
                <mx:DateField id="managerDesignationDateId" selectedDate="{program.managerDesignationDate}"/>
            </mx:FormItem>
            <mx:FormItem label="{resourceManager.getString('nestor', 'planning')}">
                <mx:HBox width="100%" height="100%">
                    <mx:DataGrid width="100%" height="100%" id="planningGridId" dataProvider="{program.plannings}"
                                 doubleClickEnabled="true" doubleClick="" editable="true">
                        <mx:columns>
                            <mx:DataGridColumn headerText="{resourceManager.getString('nestor', 'description')}"
                                               dataField="name" editable="true"/>
                            <mx:DataGridColumn headerText="{resourceManager.getString('nestor', 'date')}"
                                               dataField="date"/>
                        </mx:columns>
                    </mx:DataGrid>
                    <mx:VBox height="100%">
                        <mx:Button icon="@Embed('/icon/addlink.gif')" click="createPlanning(event)"/>
                        <mx:Button icon="@Embed('/icon/deletelink.gif')" click="deletePlanning()"
                                   enabled="{planningGridId.selectedIndices.length > 0}"/>
                    </mx:VBox>
                </mx:HBox>
            </mx:FormItem>
            <mx:FormItem>
                <mx:Button id="saveId" label="{resourceManager.getString('nestor', 'save')}" click="save()"/>
            </mx:FormItem>
        </mx:Form>
    </mx:Panel>


</mx:Application>